# Default values for reth-grandine.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.
#Â Replicas are not supported

# -- Overrides the chart's name
nameOverride: ""
# -- Overrides the chart's computed fullname
fullnameOverride: ""

global:
  # -- Engine API JSON-RPC Port
  engineRpcPort: 8551
  # -- Network name: mainnet, holesky, sepolia
  network: holesky
  # -- A list of pull secrets is used when credentials are needed to access a container registry with username and password.
  imagePullSecrets: {}
  # -- Pod annotation to be added
  podAnnotations: {}
  # -- Pod labels to be added
  podLabels:
    {}
    # protocol: ethereum
    # network: mainnet
    # state: dev
  nodeSelector: {}
  tolerations: []
  # -- Set affinity
  affinity: {}
  # -- Pod security context
  securityContext:
    fsGroup: 1000
    runAsGroup: 1000
    runAsNonRoot: true
    runAsUser: 1000
  updateStrategy:
    # -- Update stategy type
    type: RollingUpdate
  # -- Time for clean-shutdown
  terminationGracePeriodSeconds: 120
  # PVC settings
  persistence:
    # -- Access mode for pvc
    accessModes:
      - ReadWriteOnce
    # -- Requested size the pvc (adjust for mainnet usage)
    size: 100Gi
    # -- Use a specific storage class.
    storageClassName: null
  serviceAccount:
    # -- Enable service account (Note: Service Account will only be automatically created if `global.serviceAccount.name` is not set)
    create: true
    # -- Annotations to add to the service account
    annotations: {}
    # -- Name of an already existing service account. Setting this value disables the automatic service account creation
    name: ""
  podMonitor:
    # -- Create a [PodMonitor](https://github.com/prometheus-operator/prometheus-operator/blob/main/Documentation/user-guides/getting-started.md)
    create: false
  service:
    # -- Enable Service
    enabled: true
    # -- Service type, ClusterIP, LoadBalancer or ClusterIP.
    type: ClusterIP
    # -- Service annotations
    annotations: {}

# init-common
initCommon:
  # -- Init container to set the correct permissions to access data directories and create the jwt file.
  name: init-common
  image:
    # -- Container image repository. Archlinux contains curl and openssl.
    repository: archlinux
    # -- Container pull policy
    pullPolicy: IfNotPresent
    # -- Image tag
    tag: "latest"
  containerSecurityContext:
    runAsNonRoot: false
    runAsUser: 0

# reth
reth:
  # -- Name of the container
  name: reth
  image:
    # -- Container image repository
    repository: "ghcr.io/paradigmxyz/reth"
    # -- Container pull policy
    pullPolicy: IfNotPresent
    # -- Image tag
    tag: v1.0.3
  containerSecurityContext:
    runAsGroup: 1000
    runAsNonRoot: true
    runAsUser: 1000
  # -- Rust log level: error, warn, info, debug, trace
  logLevel: info
  # -- Run as full node (default is archive)
  fullNode:
    enabled: false
  # -- Static peers settings
  staticPeers:
    # -- Enable static peers. Switch added since reth does not accept empty string as argument for trusted-peers
    enabled: false
    # -- List of static peers (optional)
    peers: []
  ports:
    # -- Execution API port HTTP
    rpc: 8545
    # -- Execution API port WebSockets
    ws: 8546
    # -- TCP and UDP P2P port: place in range 30000-32767 and verify that no existing nodes use these ports
    p2p: 30001
    # -- Metrics port
    metrics: 6060
  rpc:
    # -- Set the maximum RPC request payload size for both HTTP and WS in megabytes
    maxRequestSize: 15
    # --  Set the maximum RPC response payload size for both HTTP and WS in megabytes
    maxResponseSize: 500
    # -- Set the the maximum concurrent subscriptions per connection
    maxSubscriptionsPerConnection: 1024
    # -- Maximum number of RPC server connections
    maxConnections: 100000
    # -- Maximum number of concurrent tracing requests
    maxTracingRequests: 100
    # -- Api namespaces to enable: admin, debug, eth, net, trace, txpool, web3, rpc
    httpApi:
      - debug
      - eth
      - net
      - trace
      - txpool
      - web3
      - rpc
  livenessProbe:
    tcpSocket:
      # -- Liveness probe tcpSocket port
      port: 8545
    initialDelaySeconds: 60
    periodSeconds: 120
  readinessProbe:
    tcpSocket:
      # -- Readiness probe tcpSocket port
      port: 8545
    initialDelaySeconds: 60
    periodSeconds: 10
  # -- Resource requests and limits
  resources:
    limits:
      cpu: 4000m
      memory: 32Gi
    requests:
      cpu: 4000m
      memory: 32Gi
  podMonitor:
    path: /debug/metrics/prometheus
    interval: 30s
    scrapeTimeout: 10s

# grandine
grandine:
  # -- Name of the container
  name: grandine
  image:
    # -- Container image repository
    repository: "sifrai/grandine"
    pullPolicy: IfNotPresent
    # -- Image tag
    tag: 0.4.1
  containerSecurityContext: {}
  ports:
    # -- Beacon API port
    rest: 5052
    # -- TCP and UDP P2P port: place in range 30000-32767 and verify that no existing nodes use these ports
    p2p: 30002
    metrics: 6061
  checkpointSync:
    # -- Enable checkpoint sync
    enabled: true
    # -- Url of the trusted node
    url: "https://beaconstate.info"
  extBuilder:
    # -- enable external builder (mev-boost)
    enabled: true
    # -- url of external builder
    url: http://mev-boost:18500
  livenessProbe:
    tcpSocket:
      # -- Liveness probe tcpSocket port, default is the grandine httpRest port.
      port: 5052
    initialDelaySeconds: 60
    periodSeconds: 120
  readinessProbe:
    tcpSocket:
      # -- Readiness probe tcpSocket port, default is the grandine httpRest port.
      port: 5052
    initialDelaySeconds: 60
    periodSeconds: 10
  # -- Resource requests and limits
  resources:
    limits:
      cpu: 1000m
      memory: 6Gi
    requests:
      cpu: 1000m
      memory: 6Gi
  podMonitor:
    path: /metrics
    interval: 30s
    scrapeTimeout: 10s
